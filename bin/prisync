#!/usr/bin/env ruby

require 'optparse'
require File.dirname(__FILE__) + '/../lib/prisync'

# get a list of files in the specified path

options = { :local_path => Dir::pwd, :mode => :rsync, :extra => '' }

OptionParser.new do |opts|
  opts.banner = "Usage: prisync [options]"
  
  opts.on('-p', '--local-path PATH', 'Local path to synchronize and monitor for changes,',
          'defaults to current directory if omitted') do |path|
    options[:local_path] = path
  end

  opts.on('-r', '--target-path PATH', 'Target (remote) path to sync with. If you want to sync with',
          'a remote host it should be given as user@host:/remote/path/') do |path|
    options[:remote_path] = path
  end

  opts.on('--ssh-port [PORT]', Integer, 'deprecated. Use --port instead.') do |port|
    options[:port] = port
  end

  opts.on('--port [PORT]', Integer, 'remote ssh port to use, if you want to rsync via ssh tunnel.',
          'You HAVE to specify remote host name in the target-path option. rsync mode only.') do |port|
    options[:port] = port
  end

  opts.on('--mode [MODE]', [:ftpsync, :rsync], 'synchronization mode, rsync or ftpsync.',
          'Defaults to rsync if omitted.') do |mode|
    options[:mode] = mode
  end

  opts.on('--extra [EXTRA]', 'any extra options to give rsync or ftpsync, will be added as is') do |extraopts|
    options[:extra] = extraopts
  end

  opts.on('-t', '--timeout [SECONDS]', Integer, 'Time to wait for any new changes to arrive before',
          'starting the actual synchronization, use to not trigger',
          'multiple synchronizations for repetitive event sources like',
          'file uploading, default value is '+Prisync::DEFAULT_TIMEOUT.to_s+' seconds') do |secs|
    options[:timeout] = secs
  end

  opts.on('-x', '--exclude [REGEXP]', Regexp, 'Exclusion mask, should be specified as a valid Regexp. Items',
          'matching this regexp will be excluded from monitoring and will not',
          'trigger synchronization but will still be synced by rsync') do |exclude|
    options[:exclude] = exclude
  end

  opts.on('-s', '--sync-on-start', 'Triggers initial synchronization on start') do
    options[:sync_on_start] = true
  end

  opts.on('-v', '--verbose', 'Run verbosely with debug output') do
    options[:debug] = true
  end

  opts.on('--dry', 'Only print the sync command without actually executing it') do
    options[:dryrun] = true
  end

  opts.on_tail('-h', '--help', 'Show help') do
    puts opts
    exit
  end

end.parse!

sync = Prisync.new
sync.start(options)
